{"version":3,"sources":["images/Technology.png","images/image.svg","components/home.js","components/Appbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","Keyframes","heartBeat","timings","ref2","useWebAnimations","timing","delay","iterations","Infinity","ref","keyframes","pulse","morning","transform","duration","direction","easing","text","bounceInLeft","className","src","techno","alt","pic","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","classes","AppBar","position","Toolbar","Typography","variant","Button","color","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,gPC4E5BC,MAtEf,WAAgB,IACJC,EAAuBC,IAAvBD,UAAWE,EAAYD,IAAZC,QACVC,EAAQC,YAAiB,CACpCJ,YACAK,OAAO,2BACFH,GADC,IAEJI,MAAO,IAEPC,WAAYC,QANRC,IAUIC,EAAsBC,IAAtBD,UAAWL,EAAWM,IAAXN,OACVO,EAAYR,YAAiB,CACxCM,YACAL,OAAO,2BACFA,GADC,IAEJC,MAAO,IAEPC,WAAYC,QANRC,IASIA,EAAQL,YAAiB,CAC7BM,UAAW,CACP,CAACG,UAAW,yBACZ,CAACA,UAAW,2BAEhBR,OAAQ,CACNC,MAAO,IACPQ,SAAU,IACVP,WAAYC,IACZO,UAAW,YACXC,OAAQ,iBAVNP,IAaMQ,EAAOb,YAAiB,eAAIc,MAAjCT,IAIb,OACI,oCAEJ,6BAASU,UAAU,UAEnB,6BACI,wBAAIA,UAAU,KAAKV,IAAKQ,GAAxB,8HAGA,yBAAKR,IAAKA,EAAKW,IAAKC,IAAQF,UAAU,SAASG,IAAI,UAMvD,6BAASH,UAAU,UAEf,6BACA,uBAAGA,UAAU,OAAOV,IAAKG,GAAzB,sDAGI,yBAAKH,IAAKN,EAAMiB,IAAKG,IAAKJ,UAAU,SAASG,IAAI,SAErD,4BAAQH,UAAU,UAAlB,2B,wCC7DEK,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OAIC,SAASK,IACtB,IAAMC,EAAUV,IAEhB,OACE,yBAAKL,UAAWe,EAAQP,MACtB,kBAACQ,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKpB,UAAWe,EAAQF,OAA5C,SAGA,kBAACQ,EAAA,EAAD,CAAQC,MAAM,WAAd,SACA,kBAACD,EAAA,EAAD,CAAQC,MAAM,WAAd,a,MCbKC,MAZf,WAEE,OAEA,6BACE,kBAACT,EAAD,MACA,kBAAC,EAAD,QCCgBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0244993c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Technology.d2897285.png\";","module.exports = __webpack_public_path__ + \"static/media/image.012aaa81.svg\";","import React from 'react';\nimport './home.css'\nimport techno from './../images/Technology.png';\nimport useWebAnimations, {bounceInLeft, pulse, heartBeat }from \"@wellyshen/use-web-animations\";\nimport pic from './../images/image.svg';\n\nfunction Home(){\n    const { Keyframes, timings } = heartBeat;\nconst { ref: ref2} = useWebAnimations({\n  Keyframes,\n  timing: {\n    ...timings,\n    delay: 1000, // Delay 1s\n    //duration: timing.duration * 0.75, // Speed up the animation\n    iterations: Infinity\n  },\n});\n\n    const { keyframes, timing } = pulse;\nconst { ref: morning } = useWebAnimations({\n  keyframes,\n  timing: {\n    ...timing,\n    delay: 1000, // Delay 1s\n    //duration: timing.duration * 0.75, // Speed up the animation\n    iterations: Infinity\n  },\n});\n    const { ref } = useWebAnimations({\n        keyframes: [\n            {transform: \"translate(20px, 10px)\"},\n            {transform: \"translateX(40px, 10px)\"},\n        ],\n        timing: {\n          delay: 500, \n          duration: 1000, \n          iterations: Infinity, \n          direction: \"alternate\", \n          easing: \"ease-in-out\", \n        },\n      });\n      const {ref: text}= useWebAnimations({...bounceInLeft\n\n      })\n\nreturn(\n    <>\n\n<section className=\"secone\">\n\n<div>\n    <h1 className='h1' ref={text} >\n        \"The Brain is wider than the sky & your brain works just like a computer so make sure you're the only one programming it\"\n    </h1>\n    <img ref={ref} src={techno} className=\"imgone\" alt=\"img\"/>\n    \n</div>\n\n</section>\n\n<section className=\"sectwo\">\n\n    <div>\n    <p className=\"para\" ref={morning}>\n           \"Early morning walk is blessing for the whole day\"\n        </p>\n        <img ref={ref2} src={pic} className=\"image2\" alt=\"pic\" />\n    </div>\n    <footer className=\"footer\">\n        Made By: Fahad Brohi\n    </footer>\n    \n</section>\n</>\n)\n}\nexport default Home;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            BROHI\n          </Typography>\n          <Button color=\"inherit\">Login</Button>\n          <Button color=\"inherit\">SignUp</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from 'react';\nimport Home from \"./components/home\"\nimport ButtonAppBar from './components/Appbar'\nimport './App.css';\n\nfunction App() {\n  \n  return (\n\n  <div>\n    <ButtonAppBar/>\n    <Home/>\n  </div>\n\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}